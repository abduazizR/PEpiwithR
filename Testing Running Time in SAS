/* Assign library references to the folders */
libname libref1 '\\pharm-psop\Truven Data\CCAE\2017';
libname libref2 '\\pharm-psop\Truven Data\CCAE\2018';
libname libref3 '\\pharm-psop\Truven Data\CCAE\2019';
libname libref4 '\\pharm-psop\Truven Data';
libname	libref5 'Z:\easy-claims-analysis-r-python\sas';

libname libref6 '\\pharm-psop\Truven Data\CCAE\2020';
libname libref7 '\\pharm-psop\Truven Data\CCAE\2021';

/*Task 1: What are the counts and proportions of males and females in outpatient claims (2017-2019) by year?*/
/*Task 1a*/
data task1; 
	set libref1.ccaeo171
		libref2.ccaeo181
		libref3.ccaeo195_a
		libref6.ccaeo202_a
		libref7.ccaeo211_a;
keep SEX YEAR;
run; 

proc freq data = task1; 
	table SEX;
	by YEAR;  
	run; 

/*Task 1b*/
proc freq data = libref1.ccaeo171; 
	table SEX; 
	run; 

proc freq data = libref2.ccaeo181; 
	table SEX; 
	run; 

proc freq data = libref3.ccaeo195_a; 
	table SEX; 
	run; 


/***********************************/

/*Task 2 - Calculate the mean co-payments amount in pharmacy claims (2017-2019) for metformin-containing medications - Works */
/* Merge the drug data files (2017-2019) and keep relevant variables for analysis */
data task2; 
	set libref1.ccaed171
		libref2.ccaed181
		libref3.ccaed195_a;
	keep ENROLID NDCNUM COPAY YEAR;
run; 

/* Export the dataset to a local CSV file to avoid re-running */
proc export data=work.task2
    outfile="Z:\easy-claims-analysis-r-python\sas\task2.csv"
    dbms=csv replace;
run;

/*Generate NDC numbers for metformin*/
data collected_ndc;
  set libref4.redbook;
  where upcase(GENNME) like '%METFORMIN%';
  NDCNUM_char = put(NDCNUM, 32.); /* Convert NDCNUM to character format */
  keep NDCNUM_char;
run; /*No Time Reporting Requirement*/

data collected_ndc;
  set collected_ndc(rename=(NDCNUM_char=NDCNUM));
run; /*No Time Reporting Requirement*/

/* Filter out rows with missing ENROLID and missing COPAY */
data task2_filtered;
    set task2;
    where not missing(ENROLID) and not missing(COPAY);
run; 
 */ 

/* Sort the task2_filtered dataset by NDCNUM */
proc sort data=task2_filtered;
  by NDCNUM;
run; 

/* Merge task2_filtered with collected_ndc to include only relevant NDCNUMs */
data task2_merged;
  merge task2_filtered(in=a) collected_ndc(in=b);
  by NDCNUM;
  if a and b; /* Keep only matching records */
run; 

/* Calculate mean COPAY by YEAR for medications with relevant NDCNUMs */
proc summary data=task2_merged nway noprint;
    var COPAY;
    class YEAR;
    output out=summary_mean_copay(drop=_TYPE_ _FREQ_) mean(COPAY)=COPAY2;
run; 

proc print data=summary_mean_copay;
run; 

/*****************************************/

/*Task 3 - How many pioglitazone dispensing claims with at least a 30-day supply in 2018 and 2019? - Works*/ 
/* Merge the drug data files (2017-2019) and keep relevant variables for analysis */
data task3; 
	set libref2.ccaed181
		libref3.ccaed195_a;
	keep ENROLID NDCNUM DAYSUPP YEAR;
run; 

/* Export the dataset to a local CSV file to avoid re-running */
proc export data=work.task3
    outfile="Z:\easy-claims-analysis-r-python\sas\task3.csv"
    dbms=csv replace;
run; 

/*Generate NDC numbers for pioglitazone*/
data collected_ndc;
  set libref4.redbook;
  where upcase(GENNME) like 'PIOGLITAZONE HYDROCHLORIDE';
  NDCNUM_char = put(NDCNUM, 32.); /* Convert NDCNUM to character format */
  keep NDCNUM_char GENNME;
run; 

/*Rename to NDCNUM to allow merge*/
data collected_ndc;
  set collected_ndc(rename=(NDCNUM_char=NDCNUM));
run; /*No Time Reporting Requirement - 0.00 seconds*/

proc print data = collected_ndc (obs=300); run;
/*Sort data for merge*/
proc sort data=task3;
  by NDCNUM;
run; 

/*Inner join datasets to only keep patients who fill pioglitazone*/
data merged;
  merge task3(in=a)
        collected_ndc (in=b);
  by NDCNUM;
  if a and b;
run; 

/* Filter and calculate COUNT by YEAR */
proc sql;
  create table summary_count_per_year as
  select YEAR, count(*) as Count
  from merged
  where YEAR between 2018 and 2019
    and not missing(ENROLID) and DAYSUPP >= 30
  group by YEAR;
quit; 

proc print data = summary_count_per_year; run;


/****************************************/


/*Task 4: Calculate the summary statistics (count and proportion) of the number of hospital admissions per beneficiary (2017-2019). - works, matches output*/
data task4; 
	set libref1.ccaei171
		libref2.ccaei181
		libref3.ccaei195_a;
run; 

proc freq data=task4 noprint;
  where not missing(ENROLID);
  tables ENROLID / out=summary_count_enrolid;
run; 

/* Sort the summary_count_enrolid dataset by descending count */
proc sort data=summary_count_enrolid out=summary_count_enrolid_sorted;
  by descending COUNT;
run;

/* Export the summary_count_enrolid dataset to a CSV file */
proc export data=summary_count_enrolid_sorted
    outfile="Z:\easy-claims-analysis-r-python\sas\task4.csv"
    dbms=csv replace;
run;

/******************************************************/

/*Task 5: Calculate the counts and proportions of type 2 diabetes patients by region (2017-2019) - works; matches output*/
/*Load Outpatient Datasets*/
data task5; 
	set libref1.ccaeo171
		libref2.ccaeo181
		libref3.ccaeo195_a;
	keep ENROLID YEAR REGION DX1 DX2 DX3 DX4;
run; 

data libref5.task5; set task5; run;

%let icd_list = 'E119'
'O24111'
'O24112'
'O24113'
'O24119'
'O2412'
'O2413'
'E1100'
'E1101'
'E1110'
'E1111'
'E1121'
'E1122'
'E1129'
'E11311'
'E11319'
'E11321'
'E113211'
'E113212'
'E113213'
'E113219'
'E11329'
'E113291'
'E113292'
'E113293'
'E113299'
'E11331'
'E113311'
'E113312'
'E113313'
'E113319'
'E11339'
'E113391'
'E113392'
'E113393'
'E113399'
'E11341'
'E113411'
'E113412'
'E113413'
'E113419'
'E11349'
'E113491'
'E113492'
'E113493'
'E113499'
'E11351'
'E113511'
'E113512'
'E113513'
'E113519'
'E113521'
'E113522'
'E113523'
'E113529'
'E113531'
'E113532'
'E113533'
'E113539'
'E113541'
'E113542'
'E113543'
'E113549'
'E113551'
'E113552'
'E113553'
'E113559'
'E11359'
'E113591'
'E113592'
'E113593'
'E113599'
'E1136'
'E1137X1'
'E1137X2'
'E1137X3'
'E1137X9'
'E1139'
'E1140'
'E1141'
'E1142'
'E1143'
'E1144'
'E1149'
'E1151'
'E1152'
'E1159'
'E11610'
'E11618'
'E11620'
'E11621'
'E11622'
'E11628'
'E11630'
'E11638'
'E11641'
'E11649'
'E1165'
'E1169'
'E118'
'E1100'
'E1101'
'E1110'
'E1111'
'E1121'
'E1122'
'E1129'
'E11311'
'E11319'
'E11321'
'E113211'
'E113212'
'E113213'
'E113219'
'E11329'
'E113291'
'E113292'
'E113293'
'E113299'
'E11331'
'E113311'
'E113312'
'E113313'
'E113319'
'E11339'
'E113391'
'E113392'
'E113393'
'E113399'
'E11341'
'E113411'
'E113412'
'E113413'
'E113419'
'E11349'
'E113491'
'E113492'
'E113493'
'E113499'
'E11351'
'E113511'
'E113512'
'E113513'
'E113519'
'E113521'
'E113522'
'E113523'
'E113529'
'E113531'
'E113532'
'E113533'
'E113539'
'E113541'
'E113542'
'E113543'
'E113549'
'E113551'
'E113552'
'E113553'
'E113559'
'E11359'
'E113591'
'E113592'
'E113593'
'E113599'
'E1136'
'E1137X1'
'E1137X2'
'E1137X3'
'E1137X9'
'E1139'
'E1140'
'E1141'
'E1142'
'E1143'
'E1144'
'E1149'
'E1151'
'E1152'
'E1159'
'E11610'
'E11618'
'E11620'
'E11621'
'E11622'
'E11628'
'E11630'
'E11638'
'E11641'
'E11649'
'E1165'
'E1169'
'E118'
'E119'
'O24111'
'O24112'
'O24113'
'O24119'
'O2412'
'O2413'
; /* Replace with your list of ICD-10 codes */

proc sql;
    create table matched_obs as
    select *
    from task5
    where DX1 in (&icd_list.)
       or DX2 in (&icd_list.)
       or DX3 in (&icd_list.)
       or DX4 in (&icd_list.);
quit;



proc sort data=matched_obs out=unique_matched_obs nodupkey;
  by ENROLID REGION;
run; 
	
proc freq data = unique_matched_obs; 
	table region; 
	run; 
